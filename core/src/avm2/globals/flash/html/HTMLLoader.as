// The initial version of this file was autogenerated from the official AS3 reference at
// https://help.adobe.com/en_US/FlashPlatform/reference/actionscript/3/flash/html/HTMLLoader.html
// by https://github.com/golfinq/ActionScript_Event_Builder
// It won't be regenerated in the future, so feel free to edit and/or fix

package flash.html
{
    import __ruffle__.stub_constructor;
    import __ruffle__.stub_method;
    import flash.display.NativeWindowInitOptions;
    import flash.display.Sprite;
    import flash.geom.Rectangle;
    import flash.html.HTMLHost;
    import flash.net.URLRequest;
    import flash.system.ApplicationDomain;
    
    public class HTMLLoader extends Sprite
    {
        

        // Specifies whether authentication requests should be handled (true) or not (false) for HTTP requests issued by this object.
        public var authenticate: Boolean;
        
        // Specifies whether successful response data should be cached for HTTP requests issued by this object.
        public var cacheResponse: Boolean;
        
        // The height, in pixels, of the HTML content.
        private var _contentHeight: Number;
        
        // The width, in pixels, of the HTML content.
        private var _contentWidth: Number;
        
        // Indicates whether any content in the HTMLLoader object is focusable.
        private var _hasFocusableContent: Boolean;
        
        // [override] Specifies the height of the rectangle of the HTML canvas that is being rendered.
        //override public var height: Number;
        
        // The overall length of the history list, including back and forward entries.
        private var _historyLength: uint;
        
        // The current position in the history list.
        public var historyPosition: uint;
        
        // The HTMLHost object used to handle changes to certain user interface elements, such as the window.document.title property of the HTMLLoader object.
        public var htmlHost: HTMLHost;
        
        // Specifies the idle timeout value (in milliseconds) for HTTP requests issued by this object.
        public var idleTimeout: Number;
        
        // Indicates whether the HTMLLoader class is supported on the client system.
        private var _isSupported: Boolean;
        
        // Indicates whether the JavaScript load event corresponding to the previous call to the load() or loadString() method has been delivered to the HTML DOM in the HTMLLoader object.
        private var _loaded: Boolean;
        
        // The URL for the content loaded in the HTMLLoader object.
        private var _location: String;
        
        // Specifies whether the HTTP protocol stack should manage cookies for this object.
        public var manageCookies: Boolean;
        
        // Specifies whether navigation of the root frame of the HTML content (such as when the user clicks a link, when the window.location property is set, or when calling window.open()) results in navigation in the HTMLLoader object (false) or in the default system web browser (true).
        public var navigateInSystemBrowser: Boolean;
        
        // Specifies whether the background of the HTMLLoader document is opaque white (true) or not (false).
        public var paintsDefaultBackground: Boolean;
        
        // The type of PDF support on the user's system, defined as an integer code value.
        private var _pdfCapability: int;
        
        // Specifies whether content loaded via the loadString() method is put in the application sandbox (true) or in a non-application sandbox (false).
        public var placeLoadStringContentInApplicationSandbox: Boolean;
        
        // The application domain to use for the window.runtime object in JavaScript in the HTML page.
        public var runtimeApplicationDomain: ApplicationDomain;
        
        // The horizontal scroll position of the HTML content in the HTMLLoader object.
        public var scrollH: Number;
        
        // The vertical scroll position of the HTML content in the HTMLLoader object.
        public var scrollV: Number;
        
        // The type of SWF support on the user's system, defined as an integer code value.
        private var _swfCapability: int;
        
        // The character encoding used by the HTMLLoader content if an HTML page does not specify a character encoding.
        public var textEncodingFallback: String;
        
        // The character encoding used by the HTMLLoader content, overriding any setting in the HTML page.
        public var textEncodingOverride: String;
        
        // Specifies whether the local cache should be consulted before HTTP requests issued by this object fetch data.
        public var useCache: Boolean;
        
        // The user agent string to be used in any upcoming content requests from this HTMLLoader object.
        public var userAgent: String;
        
        // [override] Specifies the width of the rectangle of the HTML canvas that is being rendered.
        //override public var width: Number;
        
        // The global JavaScript object for the content loaded into the HTML control.
        private var _window: Object;
        

        
        public function HTMLLoader()
        {
            stub_constructor("flash.html.HTMLLoader");
        }
        
        
        

        // Cancels any load operation in progress.
        public function cancelLoad():void
        {
            // Unknown Implementation
        }

        // Creates a new NativeWindow object that contains an HTMLLoader object.
        public static function createRootWindow(visible:Boolean = true, windowInitOptions:NativeWindowInitOptions = null, scrollBarsVisible:Boolean = true, bounds:Rectangle = null):HTMLLoader
        {
            // Unknown Implementation
            return new HTMLLoader
        }

        // Returns the history entry at the specified position.
        public function getHistoryAt(position:uint):HTMLHistoryItem
        {
            // Unknown Implementation
            return new HTMLHistoryItem
        }

        // Navigates back in the browser history, if possible.
        public function historyBack():void
        {
            // Unknown Implementation
        }

        // Navigates forward in the browser history, if possible.
        public function historyForward():void
        {
            // Unknown Implementation
        }

        // Navigates the specified number of steps in the browser history.
        public function historyGo(steps:int):void
        {
            // Unknown Implementation
        }

        // Loads the HTMLLoader object with data from the site specified by the urlRequestToLoad parameter.
        public function load(urlRequestToLoad:URLRequest):void
        {
            // Unknown Implementation
        }

        // Loads the HTMLLoader object with the HTML content contained in the HTML string.
        public function loadString(htmlContent:String):void
        {
            // Unknown Implementation
        }

        // Reloads the page from the current location.
        public function reload():void
        {
            // Unknown Implementation
        }

        public function get contentHeight() : Number
        {
            return this._contentHeight;
        }
        

        public function get contentWidth() : Number
        {
            return this._contentWidth;
        }
        

        public function get hasFocusableContent() : Boolean
        {
            return this._hasFocusableContent;
        }
        

        public function get historyLength() : uint
        {
            return this._historyLength;
        }
        

        public function get isSupported() : Boolean
        {
            return this._isSupported;
        }
        

        public function get loaded() : Boolean
        {
            return this._loaded;
        }
        

        public function get location() : String
        {
            return this._location;
        }
        

        public function get pdfCapability() : int
        {
            return this._pdfCapability;
        }
        

        public function get swfCapability() : int
        {
            return this._swfCapability;
        }
        

        public function get window() : Object
        {
            return this._window;
        }
        
    }
}
